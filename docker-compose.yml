version: '3.0'
services:
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - ./mnt/cassandra:/var/lib/cassandra
    environment:
      - MAX_HEAP_SIZE=4G
      - HEAP_NEWSIZE=1G
    healthcheck:
      test: ["CMD", "cqlsh", "--execute", "exit"]
      interval: 10s
      timeout: 5s
      retries: 5
  trino:
    image: trinodb/trino:431
    container_name: trino
    depends_on:
      - hive-metastore
    ports:
      - "8090:8080"
    volumes:
      - ./mnt/trino/etc:/etc/trino
      - ./mnt/trino/trino-data:/var/trino
  superset:
    build: ./docker/superset
    container_name: superset
    depends_on:
      - postgres
      - trino
    ports:
      - "8088:8088"
    volumes:
      - ./mnt/superset:/app/superset_home
    environment:
      - SUPERSET_SECRET_KEY=hieudenhi
      - SUPERSET_CONFIG_PATH=/app/superset_home/superset_config.py
      - DATABASE_URL=postgresql://airflow:airflow@postgres:5432/superset_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
  zoo:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
      ZOOKEEPER_DATA_DIR: /data
      ZOOKEEPER_LOG_DIR: /datalog
    volumes:
      - ./mnt/zookeeper:/data
      - ./mnt/zookeeper:/datalog


  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Đặt replication factor cho __consumer_offsets
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    volumes:
      - ./mnt/kafka:/tmp/kafka-logs
    depends_on:
      - zoo

######################################################
# DATABASE SERVICE
######################################################
  postgres:
    build: './docker/postgres'
    restart: always
    container_name: postgres
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32769:5432"
    volumes:
      - ./mnt/postgres:/var/lib/postgresql/data/pgdata
      - ./mnt/postgres/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow_db
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "airflow_db", "-U", "airflow" ]
      timeout: 45s
      interval: 10s
      retries: 10

  pgAdmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    volumes:
      - ./2_docker_sql/postgres_data:/var/lib/postgresql/data
    ports:
      - "32768:80"
    depends_on:
      - postgres
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root

  adminer:
    image: wodby/adminer:latest
    restart: always
    container_name: adminer
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32767:9000"
    environment:
      - ADMINER_DEFAULT_DB_DRIVER=psql
      - ADMINER_DEFAULT_DB_HOST=postgres
      - ADMINER_DEFAULT_DB_NAME=airflow_db
    healthcheck:
      test: [ "CMD", "nc", "-z", "adminer", "9000" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# HADOOP SERVICES
######################################################
  namenode:
    volumes:
        - ./mnt/hadoop/namenode:/hadoop/dfs/name
        - ./mnt/bronze_input:/bronze_input
    build: ./docker/hadoop/hadoop-namenode
    restart: always
    container_name: namenode
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32763:9870"

    environment:
      - CLUSTER_NAME=hadoop_cluster
      - HDFS_CONF_DFS_NAMENODE_DATA_DIR=file:///hadoop/dfs/name

    healthcheck:
      test: [ "CMD", "nc", "-z", "namenode", "9870" ]
      timeout: 45s
      interval: 10s
      retries: 10

  datanode:
    volumes:
        - ./mnt/hadoop/datanode:/hadoop/dfs/data
    build: ./docker/hadoop/hadoop-datanode
    restart: always
    container_name: datanode
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - namenode
  
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    healthcheck:
      test: [ "CMD", "nc", "-z", "datanode", "9864" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hive-metastore:
    build: ./docker/hive/hive-metastore
    restart: always
    container_name: hive-metastore
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - namenode
      - datanode
      - postgres
    environment:
      - SERVICE_PRECONDITION=namenode:9870 datanode:9864 postgres:5432
    ports:
      - "9083:9083"
    healthcheck:
      test: [ "CMD", "nc", "-z", "hive-metastore", "9083" ]
      timeout: 45s
      interval: 10s
      retries: 10

  hive-server:
    build: ./docker/hive/hive-server
    restart: always
    container_name: hive-server
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    depends_on:
      - hive-metastore
      - spark-master
    environment:
      - SERVICE_PRECONDITION=hive-metastore:9083
    ports:
      - "32760:10000"
      - "32759:10002"
    healthcheck:
      test: [ "CMD", "nc", "-z", "hive-server", "10002" ]
      timeout: 45s
      interval: 10s
      retries: 10



######################################################
# SPARK SERVICES
######################################################
  spark-master:
    build: ./docker/spark/spark-master
    restart: always
    container_name: spark-master
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    ports:
      - "32766:8082"
      - "32765:7077"
      - "8888:8888"
    volumes:
      - ./mnt/spark/apps:/opt/spark-apps
      - ./mnt/spark/data:/opt/spark-data
      - ./docker/hive/hive-base/conf/hive-site.xml:/opt/spark/conf/hive-site.xml
    healthcheck:
      test: [ "CMD", "nc", "-z", "spark-master", "8082" ]
      timeout: 45s
      interval: 10s
      retries: 10

  spark-worker:
    build: ./docker/spark/spark-worker
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=8g
      - SPARK_WORKER_CORES=4
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 10G
    depends_on:
      - spark-master
    ports:
      - "32764:8081"
    volumes:
      - ./mnt/spark/apps:/opt/spark-apps
      - ./mnt/spark/data:/opt/spark-data
      - ./mnt/spark/tmp:/tmp
      - ./docker/hive/hive-base/conf/hive-site.xml:/opt/spark/conf/hive-site.xml

    healthcheck:
      test: [ "CMD", "nc", "-z", "spark-worker", "8081" ]
      timeout: 45s
      interval: 10s
      retries: 10
  
  spark-worker-2:
    build: ./docker/spark/spark-worker-2
    logging:
      driver: "json-file"
      options:
          max-file: "5"
          max-size: "10m"
    container_name: spark-worker-2
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=8g
      - SPARK_WORKER_CORES=4
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 10G
    ports:
      - "32744:8083"
    volumes:
      - ./mnt/spark/apps:/opt/spark-apps
      - ./mnt/spark/data:/opt/spark-data
      - ./mnt/spark/tmp:/tmp
      - ./docker/hive/hive-base/conf/hive-site.xml:/opt/spark/conf/hive-site.xml

    healthcheck:
      test: [ "CMD", "nc", "-z", "spark-worker-2", "8083" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# AIRFLOW
######################################################

  airflow:
    deploy:
      resources:
        limits:
          memory: 4G
    build: ./docker/airflow
    restart: always
    container_name: airflow
    volumes:
      - ./mnt/airflow/airflow.cfg:/opt/airflow/airflow.cfg
      - ./mnt/airflow/dags:/opt/airflow/dags
      - ./mnt/airflow/data/tmp:/opt/airflow/data/tmp
      - ./mnt/airflow/logs:/opt/airflow/logs
      - ./mnt/bronze_input:/opt/bronze_input
      - ./docker/spark-base/conf/spark-default.conf:/opt/spark/conf/spark-default.conf  # Add this
    ports:
      - 8080:8080
      - "4040-4050:4040-4050"
    healthcheck:
      test: [ "CMD", "nc", "-z", "airflow", "8080" ]
      timeout: 45s
      interval: 10s
      retries: 10


######################################################
# NETWORK
######################################################
networks:
  default:
    name: airflow-network
